services:
  # API Server - receives leads from scraper
  chatterbot-api:
    build: .
    container_name: chatterbot-api
    restart: unless-stopped
    env_file: .env
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=${DATABASE_URL}
      - API_AUTH_ENABLED=false
    ports:
      - "5000:5000"
    command: gunicorn -w 2 -b 0.0.0.0:5000 --access-logfile - src.api.server:app
    networks:
      - aetos-network

  # Original messenger service (for later when you implement the worker)
  facebook-messenger:
    build: .
    container_name: facebook-messenger
    restart: unless-stopped
    env_file: .env
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    volumes:
      - cookies:/app/cookies
      - logs:/app/logs
      - ./config:/app/config:ro
    command: python src/main.py
    profiles:
      - worker
    networks:
      - aetos-network
    
  # Test mode - run navigation test
  messenger-test:
    build: .
    container_name: facebook-messenger-test
    env_file: .env
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    volumes:
      - test-cookies:/app/cookies
      - logs:/app/logs
      - ./config:/app/config:ro
    profiles:
      - test
    command: python test_navigation.py
    networks:
      - aetos-network

volumes:
  cookies:
    name: facebook-messenger-cookies
  test-cookies:
    name: facebook-messenger-test-cookies
  logs:
    name: facebook-messenger-logs

networks:
  aetos-network:
    external: true

# Usage:
# Start API only:       docker-compose up -d chatterbot-api
# Start worker later:   docker-compose up -d facebook-messenger
# Test:                 docker-compose --profile test up messenger-test
# Stop API:             docker-compose down chatterbot-api